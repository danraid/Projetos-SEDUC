# -*- coding: utf-8 -*-
"""AUTOMAÇÃO DE HORÁRIOS ESCOLA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nEK36a5H86JEm5DjLcZL-A5fndJNHc67
"""

!pip install -qq pdfplumber openpyxl regex

import pdfplumber
import regex
import pandas as pd
from google.colab import files

uploaded = files.upload()
pdf_path = list(uploaded.keys())[0]  # nome do arquivo PDF
print("PDF carregado:", pdf_path)

extracted_data = []

servidor_regex = (
    r"^([\p{L}'\s\.]+)"   # Nome do servidor (caracteres UNICODE, espaços, etc.)
    r"\s+"
    r"(MAT|VES)"          # Turno
    r"\s+(\d{2})"         # CH do servidor
    r"\s+(\d{11,})$"      # Código SI (11+ dígitos)
)

# Regex para segunda linha do servidor, ex.:
# "Matric.: 01127629-8G   VINCULO: A  Hab.: INTE ARTES"
mvh_regex = (
    r"Matric\.\:\s+([\d\-A-Z]+)\s+"   # Matrícula
    r"VINCULO\:\s+([A-Z])\s+"        # Vínculo
    r"Hab\.\:\s+(.+)$"               # Habilitação (resto da linha)
)

# Regex para disciplina, mas agora em findall
# Exemplo de pedaço: "039 FUND 09 05 0893 ART 1"
# Precisamos capturar 6 grupos:
#   1) 039 FUND  -> Ex.: "039 FUND"
#   2) 09        -> Série/Ano
#   3) 05        -> Turma
#   4) 0893      -> Cód. Disc
#   5) ART       -> Disc (p. ex. "ART")
#   6) 1         -> CH.TURMA
#
# Se a disciplina tiver 2 palavras ("CIEN NATUR"), será preciso ajustar
disc_pattern = (
    r"(0\d{2}\s[\p{L}]+)\s+(\d{2})\s+(\d{2})\s+(\d{4,})\s+([\p{L}]+)\s+(\d+)"
)

# =============================================================
# 5) LER O PDF, PÁGINA A PÁGINA
# =============================================================
with pdfplumber.open(pdf_path) as pdf:
    for page in pdf.pages:
        text = page.extract_text()
        if not text:
            continue

        lines = text.split("\n")
        i = 0

        # Percorre as linhas
        while i < len(lines):
            line = lines[i].strip()

            # -----------------------------------------------------
            # VERIFICA SE É LINHA DE SERVIDOR
            # -----------------------------------------------------
            match_servidor = regex.match(servidor_regex, line, flags=regex.IGNORECASE)
            if match_servidor:
                # Captura de dados do servidor
                nome_servidor = match_servidor.group(1).strip()
                turno = match_servidor.group(2).strip()
                ch_servidor = match_servidor.group(3).strip()
                codigo_si = match_servidor.group(4).strip()

                # Captura matrícula, vínculo, habilitação na linha seguinte
                matricula = ""
                vinculo = ""
                habilitacao = ""

                if (i + 1) < len(lines):
                    line_next = lines[i + 1].strip()
                    mvh_match = regex.search(mvh_regex, line_next)
                    if mvh_match:
                        matricula = mvh_match.group(1).strip()
                        vinculo = mvh_match.group(2).strip()
                        habilitacao = mvh_match.group(3).strip()

                # Percorre as linhas posteriores para achar disciplinas
                j = i + 2
                while j < len(lines):
                    line_disc = lines[j].strip()

                    # Se linha de separador ou outro servidor, paramos este bloco
                    if line_disc.startswith("---"):
                        break
                    if regex.match(servidor_regex, line_disc, flags=regex.IGNORECASE):
                        break

                    # Usa findall para capturar TODAS as disciplinas nesta linha
                    disc_matches = regex.findall(disc_pattern, line_disc)

                    # Se acharmos 1 ou mais disciplinas na linha, salvamos cada uma
                    if disc_matches:
                        for dm in disc_matches:
                            # dm é uma tupla com 6 elementos
                            # Ex.: ("039 FUND","09","05","0893","ART","1")
                            ensino      = dm[0]
                            serie_ano   = dm[1]
                            turma       = dm[2]
                            cod_disc    = dm[3]
                            nome_disc   = dm[4]
                            ch_turma    = dm[5]

                            extracted_data.append({
                                "SERVIDOR": nome_servidor,
                                "TURNO": turno,
                                "CH": ch_servidor,
                                "MATRICULA": matricula,
                                "VINCULO": vinculo,
                                "HABILITACAO": habilitacao,
                                "ENSINO": ensino,
                                "SERIE/ANO": serie_ano,
                                "TURMA": turma,
                                "COD.DISC": cod_disc,
                                "DISC": nome_disc,
                                "CH.TURMA": ch_turma
                            })

                    j += 1

                # Avança o i para pular essas linhas já analisadas
                i = j
            else:
                i += 1

# =============================================================
# 6) CONVERTER LISTA DE DICIONÁRIOS EM DATAFRAME
# =============================================================
df = pd.DataFrame(extracted_data)

# =============================================================
# 7) SEPARAR "ENSINO" EM "COD.ESCOLA" e "NIVEL"
# Se 'ENSINO' = '039 FUND', split em duas partes.
# ATENÇÃO: se houver 3 palavras (ex. "039 FUND AB"), será preciso adaptar.
# =============================================================
# Tenta split com n=1: '039 FUND' -> ('039', 'FUND')
df[["COD.ESCOLA", "NIVEL"]] = df["ENSINO"].str.split(n=1, expand=True)
df.drop(columns=["ENSINO"], inplace=True)

# =============================================================
# 8) REORDENAR COLUNAS (se desejar)
# =============================================================
colunas_finais = [
    "SERVIDOR",
    "TURNO",
    "CH",
    "MATRICULA",
    "VINCULO",
    "HABILITACAO",
    "COD.ESCOLA",
    "NIVEL",
    "SERIE/ANO",
    "TURMA",
    "COD.DISC",
    "DISC",
    "CH.TURMA"
]
df = df[colunas_finais]

# Converter as colunas 'CH' e 'CH.TURMA' para inteiros
df["CH"] = pd.to_numeric(df["CH"], errors="coerce").astype("Int64")
df["CH.TURMA"] = pd.to_numeric(df["CH.TURMA"], errors="coerce").astype("Int64")

df.head(20)

saida_excel = "saida_final.xlsx"
df.to_excel(saida_excel, index=False)
print(f"Planilha gerada: {saida_excel}")

# Selecionar as colunas necessárias
df_filtered = df[['SERVIDOR', 'TURNO']].drop_duplicates()

# Criar subdivisões das colunas SEGUNDA a SEXTA (de 1 a 5) e preenchê-las com 0
dias_semana = ['SEG', 'TER', 'QUA', 'QUI', 'SEX']
for dia in dias_semana:
    for i in range(1, 6):  # Criando colunas SEG1, SEG2, ..., SEX5
        df_filtered[f"{dia}{i}"] = 0

df_filtered.head(20)

# Caminho para salvar a nova planilha
output_file = "/content/professores.xlsx"

# Salvar a planilha sem valores duplicados
df_filtered.to_excel(output_file, index=False)